import React, { Component } from 'react';
import './App.css';
import request from 'superagent'
import {
  BrowserRouter as Router,
  Route,
  Link
} from 'react-router-dom'

class RepoDetails2 extends Component {
  constructor (props) {
    super (props)
    const v = (this.props.value)
      ? this.props.value : ''
    this.state = {
      value: v,
      items: null,
      id: null
    }
  }
  handleChange (e) {
    const v = e.target.value
    const replaceValue = v.replace(/[\x01-\x7E]/g,'')
                          .replace(/^[^\x01-\x7E]{7,}$/,'')
                          .replace(/[０-９]+$/g,'')
    this.setState({
      value: replaceValue
    })

    if(this.props.onChange) {
      this.props.onChange({
        target: this,
        value: replaceValue
      })
    }
  }
  componentDidMount() {
    const name = this.props.match.params.name;
    this.fetchData(name);
  }
  componentWillReceiveProps (nextProps) {
    this.setState({
      value: nextProps.value
    })
  }
  fetchData(name) {
    request
      .get('/bitflyer/support/${name}').end((err, res) => {
		if (res) {
			if (res.text !== "") {
				console.log("resが存在した");
				console.log("text[" + res.text + "]");
				console.log(res.body);
		        this.loadedJSON(err, res);
			}
		} else {
			console.log("resがnull");
		}
      })
  }
/*  componentWillMount () {
    request
      .get('/bitflyer/support').end((err, res) => {
		if (res) {
			if (res.text !== "") {
				console.log("resが存在した");
				console.log("text[" + res.text + "]");
				console.log(res.body);
		        this.loadedJSON(err, res);
			}
		} else {
			console.log("resがnull");
		}
      })
  }*/
/*
  componentWillMount () {
    request
      .get('./data1.json')
      .accept('application/json')
      .end((err, res) => {
        this.loadedJSON(err, res)
      })
  }
*/
  loadedJSON (err, res) {
    if (err) {
      console.log('JSON読み込みエラー');
      return;
    }
    console.log('JSON読み込み成功');
    this.setState({
      items:res.body
    })
    
  }



  render() {
    if (!this.state.items) {
      return <div> 現在読み込み中</div>
    }
    const results = this.renderStatusMessage()

    return (
      <div className="App">
	    <h1>支援履歴画面</h1>
		<h4>名前：〇〇〇〇</h4>
        <header className="App-header">
		  <table border="1">
		    <tr>
			  <td class="list_column_1">No.</td>
			  <td class="list_column_2">決済日付</td>
			  <td class="list_column_3">申込日付</td>
			  <td class="list_column_4">支援対象</td>
			  <td class="list_column_5">金額</td>
			  <td class="list_column_6">仲介</td>
			  <td class="list_column_7">手数料</td>
			  <td class="list_column_8">適用</td>
			</tr>
		  </table>
		  <table border="1">
              {results}
		  </table>
        </header>
      <Router>
        <Route path="/topics" component={About}/>
        <Route path="/history/" component={About} />
		<Route exact path="/" component={About} />
      </Router>
      </div>
    );
  }
  renderStatusMessage () {
    let results = null
/*    const preinfo = this.state.items
                    .map(item => <tr>
      <td class="list_column_value_1">{item.no}</td>
      <td class="list_column_value_2">{item.date1}</td>
      <td class="list_column_value_3">{item.date2}</td>
      <td class="list_column_value_4">{item.npo_or_person}</td>
      <td class="list_column_value_5">{item.amount}</td>
      <td class="list_column_value_6">{item.intermediary}</td>
      <td class="list_column_value_7">{item.hand_counting_material}</td>
	  <td class="list_column_value_8">{item.suitable_for}</td></tr>)
    results = <div>{preinfo}</div>*/
    return results
  }

}

const Home = () => (
  <div>
    <h2>Home</h2>
  </div>
)

const About = () => (
  <div>
    <h2>About</h2>
  </div>
)

const Topic = ({ match }) => {
/*    const image = IMAGES[parseInt(match.params.id, 10)];
    if (!image) {
      return <div>Image not found</div>;
    }
*/
  const results = this.renderStatusMessage()

  return (
      <div className="RepoDetails2">
	    <h1>支援履歴画面</h1>
		<h4>名前：〇〇〇〇</h4>
        <header className="App-header">
		  <table border="1">
		    <tr>
			  <td class="list_column_1">No.</td>
			  <td class="list_column_2">決済日付</td>
			  <td class="list_column_3">申込日付</td>
			  <td class="list_column_4">支援対象</td>
			  <td class="list_column_5">金額</td>
			  <td class="list_column_6">仲介</td>
			  <td class="list_column_7">手数料</td>
			  <td class="list_column_8">適用</td>
      <h3>{match.params.topicId}</h3>
			</tr>
		  </table>
		  <table border="1">
              {results}
		  </table>
        </header>
      </div>
  )
};

const Topics = ({ match }) => (
  <div>
    <h2>Topics</h2>
    <ul>
      <li>
        <Link to={`${match.url}/rendering`}>
          Rendering with React
        </Link>
      </li>
      <li>
        <Link to={`${match.url}/components`}>
          Components
        </Link>
      </li>
      <li>
        <Link to={`${match.url}/props-v-state`}>
          Props v. State
        </Link>
      </li>
    </ul>
    <Route path={`${match.path}/:topicId`} component={Topic}/>
    <Route exact path={match.path} render={() => (
      <h3>Please select a topic.</h3>
    )}/>
  </div>
)

const BasicExample = () => (
  <Router>
    <div>
      <ul>
        <li><Link to="/">Home</Link></li>
        <li><Link to="/about">About</Link></li>
        <li><Link to="/topics">Topics</Link></li>
      </ul>

      <hr/>

      <Route exact path="/" component={Home}/>
      <Route path="/about" component={About}/>
      <Route path="/topics" component={Topics}/>
    </div>
  </Router>
)

export default RepoDetails2;
